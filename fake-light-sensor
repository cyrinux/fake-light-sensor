#!/usr/bin/env python3

import getopt
import math
import os
import os.path
import subprocess
import sys
import tempfile
import signal
from datetime import datetime, time
from pathlib import Path
from time import sleep

FAKE_SENSOR = "/tmp/fake-devices"
INPUT = "/dev/video0"
LOCKFILE = os.environ.get("XDG_RUNTIME_DIR", "/tmp") + "/fake-light-sensor.lock"
SLEEP_TIME = 30
SLEEP_MODE = "lux"
MODE = "webcam"

SLEEP_PER_PERIODS = {
    300: [[0, 6], [20, 23]],
    15: [[12, 15]],
}

# Magic to lux from image
def get_lightness(screenshot_cmd):
    f, path = tempfile.mkstemp()
    os.close(f)
    os.remove(path)

    path += ".jpg"
    try:
        subprocess.run([*screenshot_cmd, path], check=True)
    except FileNotFoundError as e:
        raise ("The binary is not found?\n{}".format(e))
        sys.exit(1)

    result = None
    with Image.open(path) as im:
        stat = ImageStat.Stat(im)
        r, g, b = stat.rms
        result = math.sqrt(0.241 * (r ** 2) + 0.691 * (g ** 2) + 0.068 * (b ** 2))

    os.remove(path)
    return int(100 * (result / 255))


def get_lux_by_seconds():
    """
    we take current time (say 11:10am), convert to seconds (11*60*60 + 10*60 = 40200),
    and then because midday (43200s) is 100% lux and midnight (0s) is 0% lux,
    change of 1% of lux is (43200 / 100 = 432),
    current time 11am should be (100 - (43200 - 40200) / 432) = 93% of lux
    """
    midday_in_seconds = 43200
    utcnow = datetime.utcnow()
    midnight_utc = datetime.combine(utcnow.date(), time(0))
    now = utcnow - midnight_utc
    now_in_seconds = now.seconds
    # from midnigh to midday lux up
    if now_in_seconds > midday_in_seconds:
        lux = 100 - ((now_in_seconds * 100 / 43200) - 100)
    else:
        # after midday to midnigh lux down
        lux = now_in_seconds * 100 / 43200
    return int(lux)


def get_sleep_by_periods():
    hour = datetime.now().hour
    sleep_time = 30
    for p in SLEEP_PER_PERIODS:
        for r in SLEEP_PER_PERIODS[p]:
            if hour in range(r[0], r[1]):
                sleep_time = p
                break
    return int(sleep_time)


# Usage
def usage():
    print(
        "{} [--input=/dev/video0] [--output=/tmp/fake_light_sensor] [--sleep=10/periods] [--mode=webcam/seconds] [--verbose]".format(
            os.path.basename(__file__)
        )
    )
    print("env FAKE_AMBIANCE_LIGHT_SENSOR_MODE can be use for 'mode'")


# On Exit Handler
def exit_handler(signal, frame):
    print("Receive signal {}, shutdown fake sensor...".format(signal))
    os.remove(LOCKFILE)
    sys.exit(0)


class FakeSensor:
    def __init__(self):
        # test params
        try:
            opts, args = getopt.getopt(
                sys.argv[1:],
                "i:o:s:m:hv",
                ["input=", "output=", "sleep=", "mode=", "help", "verbose"],
            )
        except getopt.GetoptError as err:
            print(err)
            usage()
            sys.exit(2)

        # default values
        self.input = INPUT
        self.output_basedir = FAKE_SENSOR
        self.lux = self.prev_lux = 0
        self.sleep_time = SLEEP_TIME
        self.sleep_mode = SLEEP_MODE
        self.verbose = False
        self.mode = MODE
        self.output_basedir = (
            os.environ.get("WLUMA_LIGHT_SENSOR_BASE_PATH", FAKE_SENSOR)
            + "/light-sensor"
        )
        self.mode = os.environ.get("FAKE_AMBIANCE_LIGHT_SENSOR_MODE", MODE)

        # get params values
        for o, a in opts:
            if o in ("-v", "--verbose"):
                self.verbose = True
            elif o in ("-m", "--mode"):
                self.mode = a
            elif o in ("-s", "--sleep"):
                if a == "periods":
                    self.sleep_mode = "periods"
                    self.sleep_time = get_sleep_by_periods()
                elif a == "lux":
                    self.sleep_mode = "lux"
                else:
                    try:
                        self.sleep_time = int(a)
                        self.sleep_mode = "fixed"
                    except:
                        print(
                            "sleep must be an int or 'lux' or 'periods', default to {} seconds.".format(
                                SLEEP_TIME
                            )
                        )
                        self.sleep_time = int(SLEEP_TIME)
            elif o in ("-i", "--input"):
                self.input = a
            elif o in ("-o", "--output"):
                self.output_basedir = a
            elif o in ("-h", "--help"):
                usage()
                sys.exit()
            else:
                assert False, "unhandled option, see --help"

        # on exit do
        signal.signal(signal.SIGTERM, exit_handler)
        signal.signal(signal.SIGINT, exit_handler)

        # lock
        if os.path.isfile(LOCKFILE):
            print("{} already running!".format(os.path.basename(__file__)))
            sys.exit(2)
        Path(LOCKFILE).touch()

        self.capture_command = [
            "ffmpeg",
            "-hide_banner",
            "-loglevel",
            "panic",
            "-i",
            self.input,
            "-vframes",
            "1",
        ]

        # create fake sys tree
        self.create_fake_sensor()

    def create_fake_sensor(self):
        als_raw = self.output_basedir + "/in_illuminance_raw"
        als_name = self.output_basedir + "/name"

        # create fake /sys dir
        Path(self.output_basedir).mkdir(parents=True, exist_ok=True)
        if not os.path.isfile(als_name):
            name = open(als_name, "w")
            name.write("als")
            name.flush()

        if self.verbose:
            print("input: {}, output: {}".format(self.input, als_raw))

        self.sensor = open(als_raw, "w+")

    def write_lux(self):
        # write sensor value
        self.sensor.seek(0)
        self.sensor.truncate()
        self.sensor.write(str(self.lux))
        self.sensor.flush()
        os.fsync(self.sensor)

    def webcam_loop(self):
        if self.verbose:
            print("Sleep mode: {} will be use".format(self.sleep_mode))

        while True:
            # get sensor value
            try:
                self.lux = get_lightness(self.capture_command)
            except subprocess.CalledProcessError as e:
                raise ("Can't get lux, bad input device?\n{}".format(e))
                sys.exit(1)

            if self.lux != self.prev_lux:
                self.prev_lux = self.lux
                self.write_lux()

            if self.sleep_mode == "fixed":
                sleep_time = self.sleep_time
            elif self.sleep_mode == "periods":
                sleep_time = get_sleep_by_periods()
            elif self.sleep_mode == "lux":
                # less refresh in the dark
                sleep_time = (
                    (self.sleep_time * 2) if self.lux <= 10 else self.sleep_time
                )

                # more refresh if very bright
                sleep_time = (
                    (self.sleep_time * 0.5) if self.lux >= 80 else self.sleep_time
                )

            if self.verbose:
                print("lux={} | waiting {} seconds...".format(self.lux, sleep_time))

            # wait
            sleep(sleep_time)

    def time_base_loop(self):
        while True:
            self.lux = get_lux_by_seconds()
            if self.lux != self.prev_lux:
                self.prev_lux = self.lux
                self.write_lux()

            sleep_time = self.sleep_time

            if self.verbose:
                print("lux={} | waiting {} seconds...".format(self.lux, sleep_time))

            # wait
            sleep(sleep_time)


if __name__ == "__main__":
    fals = FakeSensor()
    if fals.mode == "seconds":
        if fals.verbose:
            print("Time period mode will be use")
        fals.time_base_loop()

    elif fals.mode == "webcam":
        from PIL import Image, ImageStat

        if fals.verbose:
            print("Webcam mode will be use")
        fals.webcam_loop()
