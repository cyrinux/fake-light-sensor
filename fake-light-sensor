#!/usr/bin/env python3

import getopt
import math
import os
import os.path
import subprocess
import sys
import tempfile
import signal
from pathlib import Path
from PIL import Image, ImageStat
from time import sleep

FAKE_SENSOR = "/tmp/fake-devices"
INPUT = "/dev/video0"
LOCKFILE = os.environ.get("XDG_RUNTIME_DIR") + "/fake-light-sensor.lock"
SLEEP_TIME = 30

# Magic to lux from image
def get_lightness(screenshot_cmd):
    f, path = tempfile.mkstemp()
    os.close(f)
    os.remove(path)

    path += ".jpg"
    subprocess.run([*screenshot_cmd, path], check=True)

    result = None
    with Image.open(path) as im:
        stat = ImageStat.Stat(im)
        r, g, b = stat.rms
        result = math.sqrt(0.241 * (r ** 2) + 0.691 * (g ** 2) + 0.068 * (b ** 2))

    os.remove(path)
    return result / 255


# Usage
def usage():
    print(
        "{} [--input=/dev/video0] [--output=/tmp/fake_light_sensor] [--sleep=10]".format(
            os.path.basename(__file__)
        )
    )


def exit_handler(signal, frame):
    print("Receive signal {}, shutdown fake sensor...".format(signal))
    os.remove(LOCKFILE)
    sys.exit(0)


def main():
    # test params
    try:
        opts, args = getopt.getopt(
            sys.argv[1:],
            "i:o:s:hv",
            ["help", "input=", "output=", "sleep=", "verbose"],
        )
    except getopt.GetoptError as err:
        print(err)
        usage()
        sys.exit(2)

    # default values
    input = INPUT
    output_basedir = FAKE_SENSOR
    lux = prev_lux = 0
    sleep_time = SLEEP_TIME
    sleep_multiplicator = 1
    verbose = False

    # try
    output_basedir = (
        os.environ.get("WLUMA_LIGHT_SENSOR_BASE_PATH", FAKE_SENSOR) + "/light-sensor"
    )

    # get params values
    for o, a in opts:
        if o in ("-v", "--verbose"):
            verbose = True
        elif o in ("-s", "--sleep"):
            sleep_time = int(a)
        elif o in ("-i", "--input"):
            input = a
        elif o in ("-o", "--output"):
            output_basedir = a
        elif o in ("-h", "--help"):
            usage()
            sys.exit()
        else:
            assert False, "unhandled option, see --help"

    als_raw = output_basedir + "/in_illuminance_raw"
    als_name = output_basedir + "/name"

    # create fake /sys dir
    Path(output_basedir).mkdir(parents=True, exist_ok=True)

    if os.path.isfile(LOCKFILE):
        print("{} already running!".format(os.path.basename(__file__)))
        sys.exit(2)

    if verbose:
        print("input: {}, output: {}".format(input, als_raw))

    # lock
    Path(LOCKFILE).touch()

    # main
    if not os.path.isfile(als_name):
        name = open(als_name, "w")
        name.write("als")
        name.flush()

    sensor = open(als_raw, "w+")

    # on exit do
    signal.signal(signal.SIGTERM, exit_handler)
    signal.signal(signal.SIGINT, exit_handler)

    # main loop
    while True:
        # get sensor value
        try:
            lux = 100 * get_lightness(
                [
                    "ffmpeg",
                    "-hide_banner",
                    "-loglevel",
                    "panic",
                    "-i",
                    input,
                    "-vframes",
                    "1",
                ]
            )
        except FileNotFoundError as e:
            print("The binary ffmpeg is not found?\n{}".format(e))
            sys.exit(1)
        except subprocess.CalledProcessError as e:
            print("Can't get lux, bad input device?\n{}".format(e))
        lux = int(lux)

        # less refresh in the dark
        sleep_multiplicator = 2 if lux <= 10 else 1

        # more refresh if very bright
        sleep_multiplicator = 0.5 if lux >= 80 else 1

        if verbose:
            print(
                "lux={} | waiting {} * {} seconds...".format(
                    lux, sleep_time, sleep_multiplicator
                )
            )

        if lux != prev_lux:
            prev_lux = lux
            # write sensor value
            sensor.seek(0)
            sensor.truncate()
            sensor.write(str(lux))
            sensor.flush()
            os.fsync(sensor)

        # wait
        sleep(sleep_time * sleep_multiplicator)


if __name__ == "__main__":
    main()
